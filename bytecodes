#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define STACK_SIZE 1024

int stack[STACK_SIZE];
int sp = 0;

void push(int value, int line_number) {
    if (sp >= STACK_SIZE) {
        fprintf(stderr, "L%d: error: stack overflow\n", line_number);
        exit(EXIT_FAILURE);
    }
    stack[sp++] = value;
}

void pall() {
    int i;
    for (i = sp - 1; i >= 0; i--) {
        printf("%d\n", stack[i]);
    }
}

int main(int argc, char **argv) {
    if (argc != 2) {
        fprintf(stderr, "Usage: %s filename\n", argv[0]);
        return EXIT_FAILURE;
    }

    FILE *file = fopen(argv[1], "r");
    if (!file) {
        perror(argv[1]);
        return EXIT_FAILURE;
    }

    char line[1024];
    int line_number = 0;

    while (fgets(line, sizeof(line), file)) {
        line_number++;

        char *opcode = strtok(line, " \t\n");

        if (!opcode) {
            continue;
        }

        if (strcmp(opcode, "push") == 0) {
            char *arg = strtok(NULL, " \t\n");
            if (!arg) {
                fprintf(stderr, "L%d: error: push requires an argument\n", line_number);
                return EXIT_FAILURE;
            }
            int value = atoi(arg);
            if (value == 0 && strcmp(arg, "0") != 0) {
                fprintf(stderr, "L%d: error: push requires an integer argument\n", line_number);
                return EXIT_FAILURE;
            }
            push(value, line_number);
        } else if (strcmp(opcode, "pall") == 0) {
            pall();
        } else {
            fprintf(stderr, "L%d: error: unknown opcode %s\n", line_number, opcode);
            return EXIT_FAILURE;
        }
    }

    fclose(file);
    return EXIT_SUCCESS;
}
